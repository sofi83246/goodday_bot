import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("7916354605:AAF5Dh9KBN1-8sRTc8pIpq67U6T8fkDJkxA")
ADMIN_ID = os.getenv("893382104")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", callback_data="about_app")],
    [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ—Ä–∞–Ω—à–∏–∑–µ", callback_data="about_franchise")],
    [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_request")]
])

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(CommandStart())
async def start_handler(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! \n\n"
        "–ï—Å–ª–∏ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫, –∂–µ–ª–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å–µ–±—è, "
        "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ –∑–∞–ø—É—Å–∫ —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏ ‚Äî "
        "—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É. –§—Ä–∞–Ω—à–∏–∑–∞ Good Day ‚Äî –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.\n\n"
        "–ù–∞–∂–º–∏ ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
    )
    await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç", callback_data="intro")]
    ]))

# –í–≤–µ–¥–µ–Ω–∏–µ
@router.callback_query(F.data == "intro")
async def intro(callback: types.CallbackQuery):
    await callback.message.answer(
        "üì± Good Day ‚Äî —ç—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. "
        "–°–º–∞—Ä—Ç—Ñ–æ–Ω ‚Äî —Å–ø—É—Ç–Ω–∏–∫ –∫–∞–∂–¥–æ–≥–æ, –∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ."
    )
    await callback.message.answer("‚¨á –ú–µ–Ω—é:", reply_markup=main_menu)
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–£–∑–Ω–∞—Ç—å –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
@router.callback_query(F.data == "about_app")
async def about_app(callback: types.CallbackQuery):
    await callback.message.answer(
        "üì± –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Good Day:\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏ –≤ –≥–æ—Ä–æ–¥–µ\n"
        "‚Ä¢ –†–µ–∫–ª–∞–º–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–æ–≤\n"
        "‚Ä¢ –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã\n\n"
        "üî• –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π.",
        reply_markup=main_menu
    )
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–û —Ñ—Ä–∞–Ω—à–∏–∑–µ"
@router.callback_query(F.data == "about_franchise")
async def about_franchise(callback: types.CallbackQuery):
    await callback.message.answer(
        "üíº –§—Ä–∞–Ω—à–∏–∑–∞ Good Day ‚Äî —ç—Ç–æ:\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ–≥–∏–æ–Ω–µ\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤—ã–π IT-–ø—Ä–æ–¥—É–∫—Ç\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–±—É—á–µ–Ω–∏–µ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥\n\n"
        "–¢—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –∫ —Ä–µ–∫–ª–∞–º–Ω—ã–º –ø–∞–∫–µ—Ç–∞–º.\n"
        "–ú—ã –ø–æ–º–æ–≥–∞–µ–º —Ç–µ–±–µ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –∑–∞–ø—É—Å–∫–∞.",
        reply_markup=main_menu
    )
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
@router.callback_query(F.data == "send_request")
async def send_request(callback: types.CallbackQuery):
    user = callback.from_user
    text = (
        f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"–ò–º—è: {user.full_name}\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '–Ω–µ—Ç'}\n"
        f"ID: {user.id}"
    )
    if ADMIN_ID:
        await bot.send_message(chat_id=int(ADMIN_ID), text=text)
    await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
